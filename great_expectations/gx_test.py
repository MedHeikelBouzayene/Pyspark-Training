import great_expectations as gx

#Run the following command to import the existing DataContext object:
context = gx.get_context()

#Run the following command to connect to existing .csv data stored in the great_expectations GitHub repository:
validator = context.sources.pandas_default.read_csv(
    "https://raw.githubusercontent.com/great-expectations/gx_tutorials/main/data/yellow_tripdata_sample_2019-01.csv"
)

#Run the following command to create two Expectations:
validator.expect_column_values_to_not_be_null("pickup_datetime")
validator.expect_column_values_to_be_between("passenger_count", auto=True)
validator.save_expectation_suite()

#Run the following command to define a Checkpoint and examine the data to determine if it matches the defined Expectations:
checkpoint = context.add_or_update_checkpoint(
    name="my_quickstart_checkpoint",
    validator=validator,
)

#Run the following command to return the Validation results:
checkpoint_result = checkpoint.run()

#Run the following command to view an HTML representation of the Validation results:
context.view_validation_result(checkpoint_result)

'''
Data Context: Manages the settings and metadata for a GX project, and provides an entry point to the GX Python API.
Datasources: Connects to your source data, and organizes retrieved data for future use.
Expectations: Identifies the standards to which your data should conform.
Checkpoints: Validates a set of Expectations against a specific set of data.

'''

'''
The following are the available Data Context types:
Ephemeral Data Context: Exists in memory, and does not persist beyond the current Python session.
File Data Context: Exists as a folder and configuration files. Its contents persist between Python sessions.
Cloud Data Context: Supports persistence between Python sessions, but additionally serves as the entry point for Great Expectations 
Cloud.
'''

'''
Stores contain the metadata GX uses. This includes configurations for GX objects, information that is recorded when GX validates data, 
and credentials used for accessing data sources or remote environments. GX utilizes one Store for each type of metadata, 
and the Data Context contains the settings that tell GX where that Store should reside and how to access it.
'''

'''
Data Docs are human-readable documentation generated by GX. Data Docs describe the standards that you expect your data to conform to, 
and the results of validating your data against those standards. The Data Context manages the storage and retrieval of this information.

You can configure where your Data Docs are hosted. Unlike Stores, you can define configurations for multiple Data Docs sites. 
You can also specify what information each Data Doc site provides, allowing you to format and provide different Data Docs for different 
use cases.
'''

'''
Datasources connect GX to source data such as CSV files in a folder, a PostgreSQL database hosted on AWS, or any combination of data 
formats and environments. Regardless of the format of your source data or where it resides, Datasources provide GX with a unified API 
for working with it.
'''

'''
Data Assets are collections of records within a Data Source. While a Data Source tells GX how to connect to your source data, 
Data Assets tell GX how to organize that data. Although the records in your Data Assets can correspond directly to the contents 
of tables or files in your source data they do not necessarily need to.
'''

'''
Data Assets can be further partitioned into Batches. Batches are unique subsets of records within a Data Asset.
'''

'''
A Batch Request specifies one or more Batches within the Data Asset. Batch Requests are the primary way of retrieving data for 
use in GX. Because Batch Requests can retrieve multiple Batches they provide significant flexibility in how you utilize the data 
in a single Data Asset.
'''

'''
An Expectation is a verifiable assertion about source data. Similar to assertions in traditional Python unit tests, Expectations provide a flexible, declarative language for 
describing expected behaviors. Unlike traditional unit tests which describe the expected behavior of code given a specific input, Expectations apply to the input data itself. 
'''

'''
Expectation Suites are collections of Expectations describing your data. When GX validates data, an Expectation Suite helps streamline the process by running all of the 
contained Expectations against that data. In almost all cases, when you create an Expectation you will be creating it inside of an Expectation Suite object.
'''

'''
A Data Assistant is a utility that automates the process of building Expectations by asking questions about your data, gathering information to describe what is observed, 
and then presenting Metrics and proposed Expectations based on the answers it has determined. This can accelerate the process of creating Expectations for the provided data.
'''

'''
you can also create custom Expectations if you need a more specialized one for your data validation. You can also use custom Expectations that have been contributed by other 
GX community members by installing them as Plugins.
'''

'''
A Checkpoint is the primary means for validating data in a production deployment of GX. Checkpoints provide an abstraction for bundling a Batch (or Batches) of data with an 
Expectation Suite (or several), and then running those Expectations against the paired data.
'''